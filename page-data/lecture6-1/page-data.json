{"componentChunkName":"component---markdown-template-js","path":"/lecture6-1/","result":{"data":{"markdownRemark":{"html":"<h2>6-1. 다이나믹 프로그래밍 - 이론</h2>\n<ul>\n<li>다이나믹 프로그래밍은 <strong>메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법</strong>이다</li>\n<li><u>이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장</u>하여 다시 계산하지 않도록 한다.</li>\n<li>다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운과 보텀업)으로 구성된다.</li>\n<li>다이나믹 프로그래밍은 <strong>동적 계획법</strong>이라고도 부른다.</li>\n<li>\n<p>일반적인 프로그래밍 분야에서 동적(Dynamic)이란 어떤 의미를 가질까?</p>\n<ul>\n<li>자료구조에서 동적 할당(Dynamic Allocation)은 <strong>'프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법'</strong>을 의미한다.</li>\n<li>반면에 <span style='color:red'>다이나믹 프로그래밍</span>에서 '다이나믹'은 <strong>별다른 의미 없이 사용된 단어</strong>이다.</li>\n</ul>\n</li>\n<li>\n<p>다이나믹 프로그래밍의 조건</p>\n<ul>\n<li>다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용할 수 있다.</li>\n<li>\n<p>최적 부분 구조(Optimal Substructure)</p>\n<ul>\n<li>큰 문제를 작은 문제로 나눌수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>중복되는 부분 문제(Overlapping Subproblem)</p>\n<ul>\n<li>동일한 작은 문제를 반복적으로 해결해야 한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>피보나치 수열</h3>\n<ul>\n<li>\n<p>피보나치 수열은 다음과 같은 형태의 수열이며, 다이나믹 프로그래밍으로 효과적으로 계산할 수 있다.</p>\n<blockquote>\n<p>1,1,2,3,5,8,13,21,34,55,89,...</p>\n</blockquote>\n</li>\n<li><strong>점화식</strong>이란 <u>인접한 항들 사이의 관계식</u>을 의미한다.</li>\n<li>\n<p>피보나치 수열을 점화식으로 표현하면 다음과 같다.</p>\n<blockquote>\n<p><span style='font-size:30px'><em>a<sub>n</sub></em>=<em>a<sub>n-1</sub></em> + <em>a<sub>n-2</sub></em> , <em>a<sub>1</sub></em> = 1 , <em>a<sub>2</sub></em> = 2<span></p>\n</blockquote>\n</li>\n<li>\n<p>피보나치 수열이 계산되는 과정은 다음과 같이 표현할 수 있다.</p>\n<ul>\n<li>프로그래밍에서는 이러한 수열을 배열이나 리스트를 이용해 표현한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/103531109-08087900-4ecc-11eb-831c-7b5712c8d107.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li><em>n</em>번째 피보나치 수를 <em>f</em>(n)이라고 할 때 4번째 피보나치 수 <em>f</em>(4)를 구하는 과정은 다음과 같다.<br>\n<img src=\"https://user-images.githubusercontent.com/71132893/103531201-2f5f4600-4ecc-11eb-8fa7-b86ca7e27b92.png\" alt=\"image\"></li>\n<li>단순 재귀 소스코드(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#피보나치 함수(Fibonaci Function)을 재귀함수로 구현</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> x<span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fibo<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 실행 결과 : 3</span></code></pre></div>\n<ul>\n<li>\n<p>피보나치 수열의 시간복잡도 분석</p>\n<ul>\n<li>단순 재귀 함수로 피보나치 수열을 해결하면 지수 시간 복잡도를 가지게 된다.</li>\n<li>다음과 같이 <em>f</em>(2)가 <u>여러 번 호출</u>되는 것을 확인할 수 있다.(<span style='color:red'>중복되는 부분 문제</span>)</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/71132893/103531559-f5db0a80-4ecc-11eb-8138-a6fcbe50eb10.png\" alt=\"image\"></p>\n<ul>\n<li>피보나치 수열의 <strong>시간 복잡도</strong>는 다음과 같다.</li>\n<li><strong>세타 표기법</strong>: θ(1.618...<sup>n</sup>)</li>\n<li><strong>빅오 표기법</strong>: O(2<sup>n</sup>)</li>\n<li>빅오 표기법을 기준으로 <em>f</em>(30)을 계산하기 위해 약 10억가량의 연산을 수행하야 한다.</li>\n<li>그렇다면 <em>f</em>(100)을 계산하기 위해 얼마나 많은 연산을 수행해야 할까?</li>\n</ul>\n</li>\n<li>\n<p>피보나치 수열의 효율적인 해법 : 다이나믹 프로그래밍</p>\n<ul>\n<li>다이나믹 프로그래밍의 사용 <span style='color:red'><strong>조건</strong></span>에 만족하는지 확인한다.</li>\n<li><strong>최적 부분 구조</strong>: 큰 문제를 작은 문제로 나눌 수 있다.</li>\n<li><strong>중복되는 부분 문제</strong>: 동일한 작은 문제를 반복적으로 해결한다.</li>\n<li>피보나치 수열은 다이나믹 프로그래밍의 사용 조건을 만족한다.</li>\n</ul>\n</li>\n<li>\n<p>메모이제이션(Memoization)</p>\n<ul>\n<li>메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 하나이다.</li>\n<li><u>한 번 계산한 결과를 메모리 공간에 메모</u>하는 기법이다.</li>\n<li>같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져온다.</li>\n<li>값을 기록해 놓는다는 점에서 <strong>캐싱(Caching)</strong>이라고도 한다.</li>\n</ul>\n</li>\n<li>\n<p>탑다운 VS 보텀업</p>\n<ul>\n<li>탑다운(메모이제이션) 방식은 <strong>하향식</strong>이라고도 하며 보톰업 방식은 <strong>상향식</strong>이라고도 한다.</li>\n<li>다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식이다.</li>\n<li>결과 저장용 리스트는 <strong>DP테이블</strong>이라고 부른다.</li>\n<li>엄밀히 말하면 메모이제이션은 <u>이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미</u>한다.</li>\n<li>따라서 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아니다.</li>\n<li>한 번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해 활용하지 않을 수도 있다.</li>\n</ul>\n</li>\n<li>피보나치 수열 : 탑다운 다이나믹 프로그래밍 소스코드(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span>\n\n<span class=\"token comment\">#피보나치 함수를 재귀함수로 구현(탑 다운 다이나믹 프로그래밍)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#종료 조건(1혹은 2일 때 1을 반환)</span>\n    <span class=\"token keyword\">if</span> x<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> x<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\">#이미 계산한 적 있는 문제라면 그대로 반환</span>\n    <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환</span>\n    d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fibo<span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#실행 결과 218922995834555169026</span></code></pre></div>\n<ul>\n<li>피보나치 수열 : 보텀업 다이나믹 프로그래밍 소스코드(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#앞서 계산된 결과를 저장하기 위한 DP테이블 초기화</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span>\n\n<span class=\"token comment\">#첫 번째 피보나치 수와 두 번째 피보나치 수는 1</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\nn<span class=\"token operator\">=</span><span class=\"token number\">99</span>\n\n<span class=\"token comment\">#피보나치 함수 반복문으로 구현(보텀업 다이나믹 프로그래밍)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#실행 결과 218922995834555169026</span></code></pre></div>\n<ul>\n<li>\n<p>피보나치 수열 : 메모이제이션 동작 분석</p>\n<ul>\n<li>이미 계산된 결과를 메모리에 저장하면 다음과 같이 색칠된 노드만 처리할 것을 기대할 수 있다.\n<img src=\"https://user-images.githubusercontent.com/71132893/103537135-32136880-4ed7-11eb-80b8-07970652ec8f.png\" alt=\"image\"></li>\n<li>실제로 호출되는 함수에 대해서만 확인해 보면 다음과 같이 방문한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/103537171-448da200-4ed7-11eb-95d1-f07e579661f1.png\" alt=\"image\"></li>\n<li>메모이제이션을 이용하는 경우 피보나치 수열 함수의 시간 복잡도는 <strong><em>O(N)</em></strong>이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f('</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> x <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n  d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n\nfibo<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 실행 결과 f(6) f(5) f(4) f(3) f(2) f(1) f(1) f(2) f(3) f(4)</span></code></pre></div>\n</li>\n<li>\n<p>다이나믹 프로그래밍 VS 분할 정복</p>\n<ul>\n<li>다이나믹 프로그래밍과 분할 정복은 모두 <strong>최적 부분 구조</strong>를 가질 때 사용할 수 있다.</li>\n<li>큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황</li>\n<li>다이나믹 프로그래밍과 분할 정복의 차이점은 <span style='color:red'><strong>부분 문제의 중복</strong></span>이다.</li>\n<li>다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복 된다.</li>\n<li>분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않는다.</li>\n<li><strong>분할 정복</strong>의 대표적인 예시인 퀵 정렬을 살펴보자</li>\n<li>한번 기준 원소(Pivot)가 자리를 변경해서 자리를 잡으면 그 기준 원소의 위치는 바뀌지 않는다.</li>\n<li>분할 이후에 해당 피벗을 다시 처리하는 부분 문제는 호출하지 않는다.\n<img src=\"https://user-images.githubusercontent.com/71132893/103537756-53c11f80-4ed8-11eb-8074-f2a67f7c238f.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"알고리즘 공부 기록/강의6-1","date":"04 January, 2021"}}},"pageContext":{"slug":"/lecture6-1/"}},"staticQueryHashes":[]}