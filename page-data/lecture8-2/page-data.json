{"componentChunkName":"component---markdown-template-js","path":"/lecture8-2/","result":{"data":{"markdownRemark":{"html":"<h2>크루스칼 알고리즘</h2>\n<ul>\n<li>\n<p>신장 트리</p>\n<ul>\n<li>\n<p><u>그래프에서 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프</u>를 의미한다.</p>\n<ul>\n<li>모든 노드가 포함되어 서로 연결되면서 사이클이 존재하지 않는다는 조건은 <strong>트리</strong>의 조건이기도 하다.\n<img src=\"https://user-images.githubusercontent.com/71132893/103991583-393bbe80-51d6-11eb-8811-6c99de06e37e.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>최소 신장 트리</p>\n<ul>\n<li><u>최소한의 비용으로 구성되는 신장트리를 찾아야 할 때</u> 어떻게 해야 될까?</li>\n<li>\n<p>예를 들어 N개의 도시가 존재하는 상황에서 두 도시 사이에 도로를 놓아 <strong>전체 도시가 서로 연결</strong>될 수 있게 도로를 설치하는 경우를 생각해보자.</p>\n<ul>\n<li>두 도시 A,B를 선택했을 때 A에서 B로 이동하는 경로가 반드시 존재하도록 도로를 설치한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/103991755-799b3c80-51d6-11eb-90ab-d23f5046c2fa.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>크루스칼 알고리즘</p>\n<ul>\n<li>대표적인 <strong>최소 신장 트리 알고리즘</strong>이다.</li>\n<li>그리디 알고리즘으로 분류된다.</li>\n<li>\n<p>구체적인 동작 과정은 다음과 같다.</p>\n<ol>\n<li>간선 데이터를 비용에 따라 <strong>오름차순으로 정렬</strong>한다.</li>\n<li>\n<p>간선을 하나씩 확인하며 <u>현재의 간선이 사이클을 발생시키는지 확인</u>한다.</p>\n<ol>\n<li>사이클이 발생하지 않는 경우 최소 신장 트리에 포함시킨다.</li>\n<li>사이클이 발생하는 경우 최소 신장 트리에 포함시키지 않는다.</li>\n</ol>\n</li>\n<li>모든 간선에 대하여 2번의 과정을 반복한다.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>동작과정 살펴보기\n<img src=\"https://user-images.githubusercontent.com/71132893/103992033-e282b480-51d6-11eb-99cc-76422aeed850.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992129-034b0a00-51d7-11eb-820a-b3d99afdd5d2.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992151-09d98180-51d7-11eb-897a-96c7537f2fe3.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992181-1231bc80-51d7-11eb-8e59-71ab0ad84f63.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992201-16f67080-51d7-11eb-9670-296fc4a732b7.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992216-1d84e800-51d7-11eb-952e-de797d81ece7.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992226-21b10580-51d7-11eb-89ac-547a7caf8df2.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992243-270e5000-51d7-11eb-9911-f03104840020.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992253-2a094080-51d7-11eb-8655-36c6fddc8f53.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992264-2ecdf480-51d7-11eb-966f-c6d71eacbedc.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103992279-342b3f00-51d7-11eb-8545-fdf2dd74d54b.png\" alt=\"image\"></li>\n<li>구현 예시(python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 특정 원소가 속한 집합을 찾기</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">find_parent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 루트 노드가 아니라면, 루트 노드를 찾을 때까지 재귀적으로 호출</span>\n    <span class=\"token keyword\">if</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">:</span>\n        parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> find_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 두 원소가 속한 집합을 합치기</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">union_parent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> find_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> find_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">:</span>\n        parent<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        parent<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b\n\n<span class=\"token comment\"># 노드의 개수와 간선(Union 연산)의 개수 입력 받기</span>\nv<span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nparent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 부모 테이블 초기화하기</span>\n\n<span class=\"token comment\"># 모든 간선을 담을 리스트와, 최종 비용을 담을 변수</span>\nedges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nresult <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># 부모 테이블상에서, 부모를 자기 자신으로 초기화</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n\n<span class=\"token comment\"># 모든 간선에 대한 정보를 입력 받기</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> cost <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 비용순으로 정렬하기 위해서 튜플의 첫 번째 원소를 비용으로 설정</span>\n    edges<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 간선을 비용순으로 정렬</span>\nedges<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 간선을 하나씩 확인하며</span>\n<span class=\"token keyword\">for</span> edge <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n    cost<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> edge\n    <span class=\"token comment\"># 사이클이 발생하지 않는 경우에만 집합에 포함</span>\n    <span class=\"token keyword\">if</span> find_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> find_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        union_parent<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">+=</span> costㅉ\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>크루스칼 알고리즘 성능 분석</p>\n<ul>\n<li>크루스칼 알고리즘은 간선의 개수가<em>E</em>개 일 때, <strong><em>O</em>(<em>ElogE</em>)</strong> 의 시간 복잡도를 가진다.</li>\n<li>\n<p>크루스칼 알고리즘에서 가장 많은 시간을 요구하는 곳은 간선을 정렬을 수행하는 부분이다.</p>\n<ul>\n<li>표준 라이브러리를 이용해 <em>E</em>개의 데이터를 정렬하기 위한 시간 복잡도는 <em>O</em>(<em>ElogE</em>)이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"알고리즘 공부 기록/강의8-2","date":"08 January, 2020"}}},"pageContext":{"slug":"/lecture8-2/"}},"staticQueryHashes":[]}