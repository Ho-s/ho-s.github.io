{"componentChunkName":"component---markdown-template-js","path":"/lecture9-1/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"소수-판별-알고리즘\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%88%98-%ED%8C%90%EB%B3%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"소수 판별 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소수 판별 알고리즘</h2>\n<ul>\n<li>\n<p>소수(Prime Number)</p>\n<ul>\n<li><strong>소수</strong>란 <u><strong>1</strong>보다 큰 자연수 중에서 1과 자기 자신을 제외한 자연수로는 나누어떨어지지 않는 자연수</u>이다.\n-<strong>6</strong>은 1,2,3,6으로 나누어 떨어지므로 소수가 아니다.\n-<strong>7</strong>은 1과 7을 제외하고는 나누어 떨이지지 않으므로 소수이다.</li>\n<li>코딩테스트에서는 어떠한 자연수가 소수인지 아닌지 판별해야 하는 문제가 자주 출제된다.</li>\n</ul>\n</li>\n<li>\n<p>소수의 판별: 기본적인 알고리즘 (Python)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#소수 판별(2 이상의 자연수에 대하여)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_prime_number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\">#2부터 (x-1)까지의 모든 수를 확인하며</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#x가 해당 수로 나누어 떨어진다면</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span> <span class=\"token comment\">#소수가 아님</span>\n<span class=\"token keyword\">return</span>  <span class=\"token boolean\">True</span> <span class=\"token comment\">#소수임</span></code></pre></div>\n</li>\n</ul>\n<p>print(is<em>prime</em>number(4)) # False\nprint(is<em>prime</em>number(7)) # True</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 소수의 판별: 기본적인 알고리즘 성능 분석\n    - 2부터 x-1까지의 모든 자연수에 대하여 연산을 수행해야 한다.\n        - 모든 수를 하나씩 확인한다는 점에서 시간 복잡도는 **_O_(_X_)**이다.\n\n- 약수의 성질\n    - **모든 약수가 가운데 약수를 기준으로 곱셈 연산에 대해 대칭**을 이루는 것을 알 수 있다.\n        - 예를 들어 16의 약수는 1, 2, 4, 8, 16이다.\n        - 이때 2 X 8 = 16은 8 X 2 = 16과 대칭이다.\n    - 따라서 우리는 특정한 자연수의 모든 약수를 찾을 때 &lt;u&gt;가운데 약수(제곱근)까지만 확인&lt;/u&gt;하면 된다.\n        - 예를 들어 16이 2로 나누어 떨어진다는 것은 8로도 나누어떨어진다는 것을 의미한다.\n        ![image](https://user-images.githubusercontent.com/71132893/104083480-41513800-5282-11eb-94fc-c0a96459c946.png)\n\n- 소수의 판별: 개선된 알고리즘(python)\n```python\nimport math\n\n#소수 판별(2 이상의 자연수에 대하여)\ndef is_prime_number(x):\n    #2부터 x의 제곱근까지의 모든 수를 확인하며\n    for i in range(2,int(math.sqrt(x) + 1)):\n        #x가 해당 수로 나누어 떨어진다면\n        if x % i ==0:\n            return False #소수가 아님\n    return  True #소수임\n\nprint(is_prime_number(4)) # False\nprint(is_prime_number(7)) # True</code></pre></div>\n<ul>\n<li>\n<p>소수의 판별: 개선된 알고리즘 성능 분석</p>\n<ul>\n<li>2부터 X의 제곱근(소수점 이하 무시)까지의 모든 자연수에 대하여 연산을 수행해야 한다.</li>\n<li>시간복잡도는 <strong><em>O</em>(<em>N<sup>1/2</sup></em>)</strong>이다.</li>\n</ul>\n</li>\n<li>\n<p>다수의 소수 판별</p>\n<ul>\n<li>하나의 수에 대해서 소수인지 아닌지 판별하는 방법을 알아보았다.</li>\n<li>\n<p>하지만 <u>특정한 수의 범위 안에 존재하는 모든 소수</u>를 찾아야 할 때 어떻게 할까?</p>\n<ul>\n<li><strong>에라토스테네스의 체 알고리즘</strong>을 사용할 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"에라토스테네스의-체\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98-%EC%B2%B4\" aria-label=\"에라토스테네스의 체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에라토스테네스의 체</h3>\n<ul>\n<li>\n<p>에라토테네스의 체 개요</p>\n<ul>\n<li><u>다수의 자연수에 대하여 소수 여부를 판별</u>할 때 사용하는 대표적인 알고리즘이다.</li>\n<li>에라토스테네스의 체는 N보다 작거나 같은 모든 소수를 찾을 때 사용할 수 있다.</li>\n<li>\n<p>에라토스테네스의 체 알고리즘의 <strong>구체적인 동작 과정</strong>은 다음과 같다.</p>\n<ol>\n<li>2부터 N까지의 모든 자연수를 나열한다.</li>\n<li>남은 수 중에서 아직 처리하지 않은 가장 작은 수 <em>i</em>를 찾는다.</li>\n<li>남은 수 중에서 <em>i</em>의 배수를 모두 제거한다.(<em>i</em>는 제거하지 않는다.)</li>\n<li>더 이상 반복할 수 없을 때까지 2번과 3번 과정을 반복한다.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>동작 예시\n<img src=\"https://user-images.githubusercontent.com/71132893/104083685-05b76d80-5284-11eb-99e2-358b5623766c.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104083693-0bad4e80-5284-11eb-8fde-f9a484ec9888.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104083699-1536b680-5284-11eb-871e-0ffb9b9dcd06.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104083705-1e278800-5284-11eb-8b27-2fd20e3513aa.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104083708-2384d280-5284-11eb-9172-1f1aba9801cb.png\" alt=\"image\"></li>\n</ul>\n<p>-에라토스테네스의 체 알고리즘 구현 예시(Python)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\nn <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token comment\">#2부터 1,000까지의 모든 수에 대하여 소수 판별</span>\n<span class=\"token comment\"># 처음엔 모든 수가 소수(True)인 것으로 초기화(0과 1은 제외)</span>\narray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#에라토스테네스의 체 알고리즘 수행</span>\n<span class=\"token comment\">#2부터 n의 제곱근까지의 모든 수를 확인하며</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#i가 소수인 경우(남은 수인 경우)</span>\n    <span class=\"token comment\"># i를 제외한 i의 모든 배수를 지우기</span>\n    j <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">*</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n        array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n        j<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n\n<span class=\"token comment\">#모든 소수 출력</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>에라토스테네스의 체 알고리즘 성능 분석</p>\n<ul>\n<li>\n<p>에라토스테네스의 체 알고리즘의 시간 복잡도는 사실상 선형 시간에 가까울 정도로 매우 빠르다.</p>\n<ul>\n<li>시간 복잡도는 <strong><em>O</em>(<em>NloglogN</em>)</strong>이다.</li>\n</ul>\n</li>\n<li>\n<p>에라토스테네스의 체 알고리즘은 다수의 소수를 찾아야 하는 문제에서 효과적으로 사용될 수 있다.</p>\n<ul>\n<li>하지만 각 자연수에 대한 소수 여부를 저장해야 하므로 <strong>메모리가 많이 필요</strong>하다.</li>\n<li><strong>10억</strong>이 소수인지 아닌지 판별해야 할 때 에라토스테네스의 체를 사용할 수 있을까?</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"알고리즘 공부 기록/강의9-1","date":"09 January, 2021"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%86%8C%EC%88%98-%ED%8C%90%EB%B3%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">소수 판별 알고리즘</a></p>\n<ul>\n<li><a href=\"#%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98-%EC%B2%B4\">에라토스테네스의 체</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"slug":"/lecture9-1/"}},"staticQueryHashes":[]}