{"componentChunkName":"component---markdown-template-js","path":"/lecture1/","result":{"data":{"markdownRemark":{"html":"<h2>1. 코딩 테스트 출제 경향 분석</h2>\n<ul>\n<li>\n<p>온라인 저지 사이트</p>\n<ul>\n<li><a href=\"http://www.codeforces.com\">코드포스(Codeforces)</a> >국제대회가 열리며 다수의 기출문제 수록</li>\n<li><a href=\"https://www.topcoder.com\">탑코더(TopCoder)</a></li>\n<li><a href=\"https://leetcode.com\">릿코드(LeetCode)</a> >기업코딩테스트를 위한 다양한 문제들 수록</li>\n<li><a href=\"https://www.codechef.com\">코드셰프(CODECHEF)</a></li>\n<li><a href=\"https://www.acmicpc.net\">백준온라인저지(BOJ)</a> >많은 국내 대기업 기출문제</li>\n<li><a href=\"https://codeup.kr\">코드업(CodeUp)</a> >초보자들에게 추천</li>\n<li><a href=\"https://programmers.co.kr\">프로그래머스(Programmers)</a></li>\n<li><a href=\"https://swexpertacademy.com\">SW EXPERT Academy</a>   </li>\n</ul>\n</li>\n<li>코딩테스트에는 현재 Python과 C++으로 진행하는 것이 유리하다고 생각되어짐.</li>\n<li>프로그램 개발 방식의 코딩 테스트에서는 Python이 가장 유리하다고 생각 되어짐.</li>\n<li>알고리즘 코딩 테스트를 준비하는 과정에서 팀노트 등을 작성하며, 자신만의 소스코드를 관리하는 습관을 들이면 좋음.</li>\n<li>팀 노트 예시 <a href=\"https://github.com/ndb796/ython-Competitive-Programming-Team-Notes\">Github Link</a></li>\n<li>\n<p>가장 출제 빈도가 높은 알고리즘 유형</p>\n<ul>\n<li>그리디(쉬운 난이도)</li>\n<li>구현</li>\n<li>DFS/BFS를 활용한 탐색</li>\n</ul>\n</li>\n<li>\n<p>복잡도는 알고리즘의 성능을 나타내는 척도로, 동일한 기능의 알고리즘이 있다면 일반적으로 복잡도가 낮을수록 좋은 알고리즘임.</p>\n<ul>\n<li>시간 복잡도 : 특정한 크기의 입력에 대하여 알고리즘의 수행시간 분석</li>\n<li>공간 복잡도 : 특정한 크기의 입력에 대하여 알고리즘의 메모리 사용량 분석</li>\n</ul>\n</li>\n<li>\n<p>빅오 표기법 (Big-O Notation)</p>\n<ul>\n<li>가장 빠르게 증가하는 항만을 고려하는 표기법으로, 함수의 상한만을 나태내게 됨.</li>\n<li>가령 3N<sup>3</sup> + 5N<sup>2</sup>+ 1,000,000인 알고리즘이 있다고 할 때 빅오 표기법에서는 차수가 가장 큰 항만을 남기므로 O(N<sup>3</sup>)으로 표현됨.</li>\n<li>순위 (아래로 갈 수록 나쁨.)</li>\n<li>O(1) / 상수 시간(Constant time)</li>\n<li>O(logN) / 로그 시간(Log time)</li>\n<li>O(N) / 선형 시간</li>\n<li>O(NlogN) / 로그 선형 시간</li>\n<li>O(N<sup>2</sup>) / 이차 시간</li>\n<li>O(N<sup>3</sup>) / 삼차 시간</li>\n<li>O(2<sup>n</sup>) / 지수 시간</li>\n</ul>\n</li>\n<li>\n<p>알고리즘 설계 Tip</p>\n<ul>\n<li>일반적으로 CPU기반의 개인 컴퓨터나 채점용 컴퓨터에서 연산횟수가 5억을 넘어가는 경우:</li>\n<li>C언어를 기준으로 통상 1~3초 가량의 시간이 소요됨.</li>\n<li>Python을 기준으로 통상 5~15초 가량의 시간이 소요되며, PyPy의 경우 떄때로 C언어보다 빠르게 동작하기도 함.</li>\n<li>코딩테스트 문제에서 시간제한은 통상 1~5초가량이라는 점에 유의</li>\n<li>혹여 명시되어 있지 않은 경우 대략 5초 정도라고 생각하고 문제를 푸는 것이 합리적임.</li>\n</ul>\n</li>\n<li>\n<p>요구사항에 따라 적절한 알고리즘 설계하기</p>\n<ul>\n<li>문제에서 가장 먼저 확인해야 하는 내용은 시간제한(수행시간 요구사항)임.</li>\n<li>시간제한이 1초인 문제를 만났을 때, 일반적인 기준은 다음과 같음.</li>\n<li>N의 범위가 500인 경우: 시간 복잡도가 O(N<sup>3</sup>)인 알고리즘을 설계</li>\n<li>N의 범위가 2,000인 경우: 시간 복잡도가 O(N<sup>2</sup>)인 알고리즘을 설계</li>\n<li>N의 범위가 100,000인 경우: 시간 복잡도가 O(NlogN)인 알고리즘을 설계</li>\n<li>N의 범위가 10,000,000인 경우: 시간 복잡도가 O(N)인 알고리즘을 설계</li>\n</ul>\n</li>\n<li>\n<p>일반적인 알고리즘 문제 해결 과정은 다음과 같음</p>\n<ul>\n<li>일반적으로 대부분의 문제 출제자들은 핵심 아이디어를 캐치한다면,간결하게 소스코드를 작성할 수 있는 형태로 문제를 출제함.</li>\n<li>지문 읽기 및 컴퓨터적 사고</li>\n<li>요구사항(복잡도)분석</li>\n<li>문제 해결을 위한 아이디어 찾기</li>\n<li>소스코드 설계 및 코딩</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"알고리즘 공부 기록/강의1","date":"28 December, 2020"}}},"pageContext":{"slug":"/lecture1/"}},"staticQueryHashes":["3649515864"]}