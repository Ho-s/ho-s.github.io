{"componentChunkName":"component---markdown-template-js","path":"/lecture11/","result":{"data":{"markdownRemark":{"html":"<h3>우선순위 큐(Priority Queue)</h3>\n<ul>\n<li><strong>우선순위 큐</strong>는 <u>우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 자료구조</u>이다.</li>\n<li>\n<p>우선순위 큐는 데이터를 <strong>우선순위에 따라</strong> 처리하고 싶을 때 사용한다.</p>\n<ul>\n<li>예시) 물건 데이터를 자료구조에 넣었다가 가치가 높은 물건부터 꺼내서 확인해야 하는 경우\n<img src=\"https://user-images.githubusercontent.com/71132893/104277831-ee2dee00-54ea-11eb-909e-3fe74bc18f53.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>우선순위 큐를 구현하는 방법은 다양하다.</p>\n<ol>\n<li>단순히 <u>리스트를 이용하여 구현</u>할 수 있다.</li>\n<li><u>힙(Heap)을 이용하여 구현</u>할 수있다.</li>\n</ol>\n</li>\n<li>데이터의 개수가 N개일 때, 구현 방식에 따라서 시간 복잡도를 비교한 내용은 다음과 같다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104278018-449b2c80-54eb-11eb-928e-b89c4fc0e612.png\" alt=\"image\"></li>\n<li>\n<p>단순히 N개의 데이터를 힙에 넣었다가 모두 꺼내는 작업은 정렬과 동일하다.<strong>(힙 정렬)</strong></p>\n<ul>\n<li>\n<p>이 경우 시간 복잡도는 <strong><em>O</em>(<em>NlogN</em>)</strong>이다.</p>\n<h3>힙(Heap)</h3>\n</li>\n</ul>\n</li>\n<li>\n<p>특징</p>\n<ul>\n<li>힙은 완전 이진 트리 자료구조의 일종이다.</li>\n<li>힙에서는 항상 <strong>루트 노드(root node)를 제거</strong>한다.</li>\n<li>\n<p><strong>최소 힙(Min Heap)</strong></p>\n<ul>\n<li>루트 노드가 가장 작은 값을 가진다.</li>\n<li>따라서 값이 작은 데이터가 우선적으로 제거된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>최대 힙(Max Heap)</strong></p>\n<ul>\n<li>루트 노드가 가장 큰 값을 가진다.</li>\n<li>\n<p>따라서 값이 큰 데이터가 우선적으로 제거된다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104278255-a491d300-54eb-11eb-97c9-c546452658ba.png\" alt=\"image\"></p>\n<h3>완전 이진 트리(Complete Binary Tree)</h3>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>완전 이진 트리</strong>란 루트(root) 노드부터 시작하여 왼쪽 자식 노드, 오른쪽 자식 노드 순서대로 데이터가 차례대로 삽입되는 트리(tree)를 의미한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104278441-f76b8a80-54eb-11eb-9fcc-bf6f87149173.png\" alt=\"image\"></li>\n</ul>\n<h3>최소 힙 구성 함수: Min-Heapify()</h3>\n<ul>\n<li>(상향식)부모 노드로 거슬러 올라가며, 부모보다 자신의 값이 더 작은 경우에 위치를 교체한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104278548-2124b180-54ec-11eb-8da4-1c4a65e2285d.png\" alt=\"image\"></li>\n<li>\n<p>힙에 새로운 원소가 삽입될 때</p>\n<ul>\n<li>새로운 원소가 삽입되었을 때 <strong><em>O</em>(<em>NlogN</em>)</strong>의 시간 복잡도로 힙 성질을 유지하도록 할 수 있다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104278722-677a1080-54ec-11eb-8199-eadc866390b2.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104278759-73fe6900-54ec-11eb-989b-d6d6cd7ed13b.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104278794-837db200-54ec-11eb-8022-a03d6f1d8105.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>힙에 원소가 제거될 때</p>\n<ul>\n<li>\n<p>원소가 제거되었을 때 <strong><em>O</em>(<em>logN</em>)</strong>의 시간 복잡도로 힙 성질을 유지하도록 할 수 있다.</p>\n<ul>\n<li>원소를 제거할 때는 가장 마지막 노드가 루트 노드의 위치에 오도록 한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104278867-a314da80-54ec-11eb-8dd5-65ec591af2ef.png\" alt=\"image\"></li>\n<li>이후에 루트 노드에서부터 하향식으로(더 작은 자식 노드로) Heapify()를 진행한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104278929-c2136c80-54ec-11eb-9ac9-6c661430954d.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104278954-cb9cd480-54ec-11eb-90ff-c0efc3391185.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>우선순위 큐 라이브러리를 활용한 힙 정렬 구현 예제(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> heapq\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">heapsort</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    h<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    result<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 모든 원소를 차례대로 힙에 삽입</span>\n    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> iterable<span class=\"token punctuation\">:</span>\n        heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#힙에 삽입된 모든 원소를 차례대로 꺼내어 담기</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nres <span class=\"token operator\">=</span> heapsort<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"알고리즘 공부 기록/강의11","date":"12 January, 2021"}}},"pageContext":{"slug":"/lecture11/"}},"staticQueryHashes":[]}