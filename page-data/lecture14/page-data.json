{"componentChunkName":"component---markdown-template-js","path":"/lecture14/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"데이터-업데이트가-가능한-상황에서의-구간-합interval-sum문제\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EA%B0%80-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C%EC%9D%98-%EA%B5%AC%EA%B0%84-%ED%95%A9interval-sum%EB%AC%B8%EC%A0%9C\" aria-label=\"데이터 업데이트가 가능한 상황에서의 구간 합interval sum문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 업데이트가 가능한 상황에서의 구간 합(Interval Sum)문제</h3>\n<ul>\n<li><strong>BOJ '구간 합 구하기' 문제</strong>: <a href=\"https://www.acmicpc.net/problem/2042\">https://www.acmicpc.net/problem/2042</a></li>\n<li>어떤 N개의 수가 주어져 있다. 그런데 중간에 수의 변경이 빈번히 일어나고 그 중간에 어떤 부분의 합을 구하려 한다. 만약에 1,2,3,4,5 라는 수가 있고, 3번째 수를 6으로 바꾸고 2번째부터 5번째까지 합을 구하라고 한다면 17을 출력하면 되는 것이다. 그리고 그 상태에서 다섯 번째 수를 2로 바꾸고 3번째부터 5번째까지 합을 구하라고 한다면 12가 될 것이다.</li>\n<li><strong>데이터 개수</strong>: N( 1 &#x3C;= N &#x3C;= 1,000,000)</li>\n<li><strong>데이터 변경 횟수</strong>: M(1 &#x3C;= M &#x3C;= 10,000)</li>\n<li><strong>구간 합 계산 횟소</strong>:K(1 &#x3C;= K &#x3C;= 10,000)</li>\n<li>이 문제를 어떻게 해결할 수 있을까?</li>\n</ul>\n<h3 id=\"바이너리-인덱스-트리binary-indexed-tree\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EC%9D%B4%EB%84%88%EB%A6%AC-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%8A%B8%EB%A6%ACbinary-indexed-tree\" aria-label=\"바이너리 인덱스 트리binary indexed tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바이너리 인덱스 트리(Binary Indexed Tree)</h3>\n<ul>\n<li>\n<p><strong>바이너리 인덱스 트리(Binary indexed tree)</strong>는 2진법 인덱스 구조를 활용해 구간 합 문제를 효과적으로 해결해 줄 수 있는 자료구조를 의미한다.</p>\n<ul>\n<li><strong>펜윅 트리(fenwick tree)</strong>라고도 한다.</li>\n</ul>\n</li>\n<li>정수에 따른 2진수 표기\n<img src=\"https://user-images.githubusercontent.com/71132893/104694787-0d2cba00-574f-11eb-984f-2a1437681e27.png\" alt=\"image\"></li>\n<li>\n<p><strong>0이 아닌 마지막 비트를 찾는 방법</strong></p>\n<ul>\n<li>특정한 숫자 K의 0이 아닌 마지막 비트를 찾기 위해서 K &#x26; -K를 계산하면 된다.</li>\n</ul>\n</li>\n<li><strong>K &#x26; -K</strong> 계산 결과 예시\n<img src=\"https://user-images.githubusercontent.com/71132893/104694996-609f0800-574f-11eb-846f-bd1335463c9e.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104695052-7a404f80-574f-11eb-930c-fe0f23d02407.png\" alt=\"image\"></li>\n<li>\n<p><strong>트리 구조 만들기</strong> </p>\n<ul>\n<li>트리 구조 만들기 : 0이 아닌 마지막 비트 = 내가 저장하고 있는 값들의 개수\n<img src=\"https://user-images.githubusercontent.com/71132893/104695143-a1971c80-574f-11eb-9401-078e66699528.png\" alt=\"image\"></li>\n<li>특정 값을 변경할 때 : 0이 아닌 마지막 비트만큼 더하면서 구간들의 값을 변경(예시 = 3rd)\n<img src=\"https://user-images.githubusercontent.com/71132893/104695267-cee3ca80-574f-11eb-85bd-6c16542c026d.png\" alt=\"image\"></li>\n<li>1부터 N까지의 합(누적 합) 구하기 : 0이 아닌 마지막 비트만큼 빼면서 구간들의 값의 합 계산(예시 = 11th)\n<img src=\"https://user-images.githubusercontent.com/71132893/104695351-f9ce1e80-574f-11eb-8886-500f6a9b55f0.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>바이너리 인덱스 트리 구현 : python</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\n\n<span class=\"token comment\">#데이터의 개수(n), 변경 횟수(m), 구간 합 계산 횟수(k)</span>\nn<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>k <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 전체 데이터의 개수는 최대 1,000,000개</span>\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># i번째 수까지의 누적 합을 계산하는 함수</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">prefix_sum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> tree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># 0이 아닌 마지막 비트만큼 빼가면서 이동</span>\n        i <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token comment\"># i번째 수를 dif만큼 더하는 함수</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> dif<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> i<span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n        tree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dif\n        i <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#start 부터 end까지의 구간 합을 계산하는 함수</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">interval_sum</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> prefix_sum<span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> prefix_sum<span class=\"token punctuation\">(</span>start <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span>n <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\n    update<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#업데이트(update)연산인 경우</span>\n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        update<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#바뀐 크기(dif)만큼 적용</span>\n        arr<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n    <span class=\"token comment\">#구간 합(interval sum)연산인 경우</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>interval_sum<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"알고리즘 공부 기록/강의14","date":"15 January, 2021"},"tableOfContents":"<ul>\n<li><a href=\"/lecture14/#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EA%B0%80-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C%EC%9D%98-%EA%B5%AC%EA%B0%84-%ED%95%A9interval-sum%EB%AC%B8%EC%A0%9C\">데이터 업데이트가 가능한 상황에서의 구간 합(Interval Sum)문제</a></li>\n<li><a href=\"/lecture14/#%EB%B0%94%EC%9D%B4%EB%84%88%EB%A6%AC-%EC%9D%B8%EB%8D%B1%EC%8A%A4-%ED%8A%B8%EB%A6%ACbinary-indexed-tree\">바이너리 인덱스 트리(Binary Indexed Tree)</a></li>\n</ul>"}},"pageContext":{"slug":"/lecture14/"}},"staticQueryHashes":[]}