{"componentChunkName":"component---markdown-template-js","path":"/lecture5/","result":{"data":{"markdownRemark":{"html":"<h2>5. 이진 탐색</h2>\n<ul>\n<li>순차 탐색: 리스트 안에 있는 특정한 <strong>데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인하는 방법</strong></li>\n<li>\n<p>이진 탐색: 정렬되어 있는 리스트에서 <strong>탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법</strong></p>\n<ul>\n<li>이진 탐색은 시작점, 끝점, 중간점을 이용하여 탐색 범위를 설정한다.</li>\n</ul>\n</li>\n<li>이진 탐색 동작 예시\n<img src=\"https://user-images.githubusercontent.com/71132893/103434005-20fbfa80-4c3e-11eb-99ec-b47ba2972eb0.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103434008-29543580-4c3e-11eb-86a5-6e2131eb6fa0.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103434011-3ec95f80-4c3e-11eb-9bca-3359393a128e.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103434016-57d21080-4c3e-11eb-931a-176b630f4745.png\" alt=\"image\"></li>\n<li>\n<p>이진탐색의 시간 복잡도</p>\n<ul>\n<li>단계마다 탐색 범위를 2로 나누는 것과 동일하므로 <strong>연산 횟수는 log<sub>2</sub><em>N</em>에 비례</strong>한다.</li>\n<li>예를 들어 초기 데이터 개수가 32개 일때, 이상적으로 1단계를 거치면 16개의 데이터만 남는다.</li>\n<li>2단계를 거치면 8개의 데이터만 남는다.</li>\n<li>3단계를 거치면 4개의 데이터만 남는다.</li>\n<li>다시 말해 이진 탐색은 탐색 범위를 절반씩 줄이며, 시간 복잡도는 O(log<em>N</em>)을 보장한다.</li>\n</ul>\n</li>\n<li>이진탐색 소스코드: 재귀적 구현(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#이진 탐색 소스코드 구현(재귀 함수)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> start <span class=\"token operator\">></span> end<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    <span class=\"token comment\">#찾은 경우 중간점 인덱스 반환</span>\n    <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>traget<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> mid\n    <span class=\"token comment\">#중간점의 값보다 찾고자 하는 값이 작은 경우 왼쪽 확인</span>\n    <span class=\"token keyword\">elif</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#n(원소의 개수)과 target(찾고자 하는 값)을 입력 받기</span>\nn<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 전채 원소 입력 받기</span>\narray<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#이진 탐색 수행 결과 출력</span>\nresult<span class=\"token operator\">=</span>binary_search<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'원소가 존재하지 않습니다'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 실행 결과</span>\n<span class=\"token comment\">#10 7</span>\n<span class=\"token comment\"># 1 3 5 7 9 11 13 15 17 19</span>\n<span class=\"token comment\">#4</span></code></pre></div>\n<ul>\n<li>이진탐색 소스코드: 반복문 구현(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#이진 탐색 소스코드 구현(반복문)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> start<span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n        <span class=\"token comment\">#찾은 경우 중간점 인덱스 반환</span>\n        <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>traget<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mid\n        <span class=\"token comment\">#중간점의 값보다 찾고자 하는 값이 작은 경우 왼쪽 확인</span>\n        <span class=\"token keyword\">elif</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span>\n            end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token comment\">#중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token comment\">#n(원소의 개수)과 target(찾고자 하는 값)을 입력 받기</span>\nn<span class=\"token punctuation\">,</span> target<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 전채 원소 입력 받기</span>\narray<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#이진 탐색 수행 결과 출력</span>\nresult<span class=\"token operator\">=</span>binary_search<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'원소가 존재하지 않습니다'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 실행 결과</span>\n<span class=\"token comment\">#10 7</span>\n<span class=\"token comment\"># 1 3 5 7 9 11 13 15 17 19</span>\n<span class=\"token comment\">#4</span></code></pre></div>\n<ul>\n<li>\n<p>파라메트릭 서치(Parametric Search)</p>\n<ul>\n<li><strong>파라메트릭 서치</strong>란 <u>최적화 문제를 결정 문제('예' 혹은 '아니오')로 바꾸어 해결하는 기법</u>이다.\n예시 : 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제</li>\n<li>일반적으로 코딩 테스트에서 파라메트릭 서치 문제는 <strong>이진탐색을 이용하여 해결</strong>할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3>&#x3C;문제> 떡볶이 떡 만들기</h3>\n<ul>\n<li>\n<p>문제 설명</p>\n<ul>\n<li>오늘 당신은 여행가신 부모님을 대신해서 떡집 일을 하기로 했다. 오늘은 떡볶이 떡을 만드는 날이다. 당신의 떡볶이 떡은 재밌게도 떡의 길이가 일정하지 않다. 대신에 한 봉지 안에 들어가는 떡의 총 길이는 절단기로 맞춰준다.</li>\n<li>절단기에 <strong>높이(H)</strong>를 지정하면 줄지어진 떡을 한 번에 절단한다. 높이가 H보다 긴 떡은 H 위의 부분이 잘릴 것이고, 낮은 떡은 잘리지 않는다.</li>\n<li>예를 들어 높이가 19, 14, 10, 17cm 인 떡이 나란히 있고 절단기 높이를 15cm로 지정하면 자른 뒤 떡의 높이는 15, 14, 10, 15가 될 것이다. 잘린 떡의 길이는 차례대로 4, 0, 0, 2cm이다. 손님은 6cm만큼의 길이를 가져간다.</li>\n<li>손님이 왔을 때 요청한 총 길이가 M일때 <strong>적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램</strong>을 작성하시오.</li>\n</ul>\n</li>\n<li>문제 조건\n<img src=\"https://user-images.githubusercontent.com/71132893/103434931-5bb85f80-4c4b-11eb-9d98-6488e022b5dd.png\" alt=\"image\"></li>\n<li>문제 해결 아이디어 - 적절한 높이를 찾을 때까지 이진 탐색을 수행하여 높이 H를 반복해서 조정하면 된다. - '현재 이 높이로 자르면 조건을 만족할 수 있는가?'를 확인한 뒤에 <u>조건의 만족 여부('예' 혹은 '아니오')에 따라서 탐색 범위를 좁혀서 해결할 수 있다.</u> - 절단기의 높이는 0부터 10억까지의 정수 중 하나이다. - 이렇게 큰 탐색 범위를 보면 <span style='color:red'>가장 먼저</span> <strong>이진 탐색</strong>을 떠올려야 한다. - 문제에서 제시된 예시를 통해 그림으로 이해해보자.\n<img src=\"https://user-images.githubusercontent.com/71132893/103435665-24e74700-4c55-11eb-8e9e-d37b669f0711.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103435726-78a66000-4c56-11eb-918c-4c5864ad86e0.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103435729-8956d600-4c56-11eb-8bdc-4c5e264b70be.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103435731-91167a80-4c56-11eb-9842-047aff6a558f.png\" alt=\"image\"> - 이러한 이진 탐색 과정을 반복하면 답을 도출할 수 있다. - 중간점의 값은 <u>시간이 지날수록 <strong>'최적화된 값'</strong></u>이 되기 때문에, 과정을 반복하면서 얻을 수 있는 떡의 길이의 합이 떡의 길이보다 크거나 같은 때마다 <strong>중간점의 값을 기록</strong>하면 된다.</li>\n<li>답안 예시(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#떡의 개수(N)와 요청한 떡의 길이(M)을 입력</span>\nn<span class=\"token punctuation\">,</span>m <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#각 떡의 개별 높이 정보를 입력</span>\narray<span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#이진 탐색을 위한 시작점과 끝점 설정</span>\nstart<span class=\"token operator\">=</span><span class=\"token number\">0</span>\nend<span class=\"token operator\">=</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#이진 탐색 수행(반복적)</span>\nresult<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">&lt;=</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> array<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#잘랐을 때 떡의 양 계산</span>\n        <span class=\"token keyword\">if</span> x <span class=\"token operator\">></span> mid<span class=\"token punctuation\">:</span>\n            total <span class=\"token operator\">+=</span> x <span class=\"token operator\">-</span> mid\n    <span class=\"token comment\"># 떡의 양이 부족한 경우 더 많이 자르기(왼쪽 부분 탐색)</span>\n    <span class=\"token keyword\">if</span> total <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">:</span>\n        end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token comment\">#떡의 양이 충분한 경우 덜 자르기(오른쪽 부분 탐색)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> mid <span class=\"token comment\"># 최대한 덜 잘랐을 때가 정답이므로, 여기에서 result에 기록</span>\n        start <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\">#정답 출력</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>답안 예시(Javascript)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"M:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> dduckArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dduck <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dduck:\"</span><span class=\"token punctuation\">)</span>\n  dduckArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>dduck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ndduckArray<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> height <span class=\"token operator\">=</span> mid\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dduckArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> height <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">continue</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      sum <span class=\"token operator\">+=</span> dduckArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> height\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">===</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dduckArray<span class=\"token punctuation\">[</span>dduckArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>&#x3C;문제> 정렬된 배열에서 특정 수의 개수 구하기</h3>\n<ul>\n<li>\n<p>문제 설명</p>\n<ul>\n<li>N개의 원소를 포함하고 있는 수열이 오름차순으로 정렬되어 있다. 이때 이 <u>수열에서 x가 등장하는 횟수를 계산</u>하시오.</li>\n<li>예를 들어 수열{1,1,2,2,2,2,3}이 있을 때 x = 2라면, 현재 수열에서 값이 2인 원소가 4개이므로 4를 출력한다.</li>\n<li>단, 이 문제는 시간복잡도 O(log<em>N</em>)으로 알고리즘을 설계하지 않으면 <strong>시간 초과</strong>판정을 받는다.</li>\n</ul>\n</li>\n<li>문제 조건\n<img src=\"https://user-images.githubusercontent.com/71132893/103436038-d8066f00-4c5a-11eb-9544-d7396c84f0f8.png\" alt=\"image\"></li>\n<li>\n<p>문제 해결 아이디어</p>\n<ul>\n<li>시간 복잡도 O(log<em>N</em>)으로 동작하는 알고리즘을 요구하고 있다.</li>\n<li>일반적인 <u>선형탐색(Linear Search)로는 시간초과 판정</u>을 받는다</li>\n<li>하지만 데이터가 정렬되어 있기 때문에 이진 탐색을 수행할 수 있다.</li>\n<li>특정 값이 등장하는 첫 번째 위치와 마지막 위치를 찾아 위치 차이를 계산개 문제를 해결할 수 있다.</li>\n</ul>\n</li>\n<li>답안 예시(javascript)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num:\"</span><span class=\"token punctuation\">)</span>\n  array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">let</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">></span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    left <span class=\"token operator\">=</span> mid\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> x <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    right <span class=\"token operator\">=</span> mid\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"알고리즘 공부 기록/강의5","date":"01 January, 2020"}}},"pageContext":{"slug":"/lecture5/"}},"staticQueryHashes":["3649515864"]}