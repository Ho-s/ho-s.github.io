{"componentChunkName":"component---markdown-template-js","path":"/Mysql-Nodejs-and-Express/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h1>\n<p>생활코딩 강좌를 보던 중 mysql과 express를 동시에 사용하는 방법에 대한 강좌는 없기에 직접 만들었다.<br>\n만드는 과정은 어렵지 않으나 구글링을 해도 나오지 않아서 혹시 필요한 사람에게는 참고가 되었으면 한다.<br>\nnodejs, mysql, express에 대한 정보가 있는 사람이 본다는 전제하에 작성하였다.</p>\n<h2 id=\"expressjs-사용-이유\" style=\"position:relative;\"><a href=\"#expressjs-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\" aria-label=\"expressjs 사용 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Express.js 사용 이유</h2>\n<p>express를 사용하는 이유는 많이 있겠지만 그 중에서도, 라우터기능과 미들웨어 기능때문에 사용한다고들 한다.<br>\n라우팅이란 애플리케이션 URL의 정의, 그리고 URL이 클라이언트에 요청에 응답하는 방식을 말한다.<br>\n뒤에서 사용할 <code class=\"language-text\">app.get()</code> 혹은 <code class=\"language-text\">app.use()</code> 등이 라우팅이라고 할 수 있다.<br>\n미들웨어에 대해서는 뒤에서 다루겠다.</p>\n<h1 id=\"crud-구현\" style=\"position:relative;\"><a href=\"#crud-%EA%B5%AC%ED%98%84\" aria-label=\"crud 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRUD 구현</h1>\n<img src='https://user-images.githubusercontent.com/71132893/111727836-00dbef00-88af-11eb-8b8e-28f856a250df.png'>  \n최종적으로 우리는 `queryString`으로 데이터베이스의 아이디값을 가져와서 화면에 표현할 것이다.\n<h2 id=\"read\" style=\"position:relative;\"><a href=\"#read\" aria-label=\"read permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>READ</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> url<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> _url <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>url\n    <span class=\"token keyword\">const</span> queryData <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>_url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>query\n    <span class=\"token keyword\">const</span> pathname <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>_url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pathname\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queryData<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//실행코드</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//생략</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pathname<span class=\"token operator\">===</span><span class=\"token string\">'/something'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//생략</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">express</code>를 사용하지 않은 코드는 위와 같다. http.createServer를 이용해 서버를 생성해준후, app이라는 변수에 넣어 app.listen(port명)으로 받아준다.<br>\n이렇게 하면 가독성이 떨어지게 된다. 하여 아래와 같이 <code class=\"language-text\">express</code>를 이용하여 코드를 작성하는 것이 편리하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app<span class=\"token operator\">=</span><span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id<span class=\"token operator\">===</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 실행코드</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//생략</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example app listening on port 3000!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">express</code>를 사용하면 각각의 경로에 대해 새로운 <code class=\"language-text\">function</code>을 정의하기 떄문에 가독성이 올라가며, express없이 작업한,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> queryData <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>_url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>query</code></pre></div>\n<p>와 같은 parse의 과정 없이</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">req<span class=\"token punctuation\">.</span>query</code></pre></div>\n<p>로 바로 사용할 수 있어 편리하다는 장점이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT * FROM topic</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> topics</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> error\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\"Welcome\"</span>\n      <span class=\"token keyword\">const</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, Node.js\"</span>\n      <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token constant\">HTML</span><span class=\"token punctuation\">(</span>\n        title<span class=\"token punctuation\">,</span>\n        list<span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h2></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h2></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>description<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;a href=\"/create\">create&lt;/a></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT * FROM topic</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> topics</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> error\n      <span class=\"token punctuation\">}</span>\n      db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT * FROM topic LEFT JOIN author ON topic.author_id=author.id WHERE topic.id=?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> topic</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> err\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> topic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title\n          <span class=\"token keyword\">const</span> description <span class=\"token operator\">=</span> topic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>description\n          <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span><span class=\"token constant\">HTML</span><span class=\"token punctuation\">(</span>\n            title<span class=\"token punctuation\">,</span>\n            list<span class=\"token punctuation\">,</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n                        &lt;h2></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/h2>\n                        </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>description<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n                        &lt;p>by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>topic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/p>\n                    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> &lt;a href=\"/create\">create&lt;/a>\n                    &lt;a href=\"/update?id=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">update&lt;/a>\n                    &lt;form action=\"delete_process\" method=\"post\">\n                    &lt;input type=\"hidden\" name=\"id\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">\n                    &lt;input type=\"submit\" value=\"delete\">\n                    &lt;/form>\n                    </span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">)</span>\n          res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>기본 경로인 <code class=\"language-text\">/</code>에 있을 때에 read하는 코드의 전체는 위와 같다. <code class=\"language-text\">req.query.id</code>가 <code class=\"language-text\">undefined</code>상태 일때는, 데이터베이스의 topic테이블의 전체를 불러온 후, template.js에 있는 레이아웃을 가져와 받은 정보를 바탕으로 화면에 표시한다. 완성된 화면은 다음과 같다.<br>\n<img src='https://user-images.githubusercontent.com/71132893/111729521-9a58d000-88b2-11eb-9ceb-fdecf99d6b3f.png'></p>\n<p>혹은 불러온 데이터베이스의 테이블에서 튜플을 하나 선택했을 때는 <code class=\"language-text\">req.query.id</code>가 지정된 상태로, 위의 코드에서는 else이후의 코드에 해당되며, 위의 query문에서는 topic과 author을 id를 기준으로 합쳐서 나타내게 하는 코드를 작성하고 있다. 위 화면에서 Oracle을 누른 완성된 화면은 아래와 같다.<br>\n<img src=\"https://user-images.githubusercontent.com/71132893/111729705-076c6580-88b3-11eb-8c0d-28b0904ad318.png\" alt=\"image\"></p>\n<h2 id=\"create\" style=\"position:relative;\"><a href=\"#create\" aria-label=\"create permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CREATE</h2>\n<p>create에서는 <code class=\"language-text\">post</code>형태의 <code class=\"language-text\">form</code>을 가져와 보내주는 과정을 통해 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/create'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT * FROM topic</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> topics</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span>\n                <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n            &lt;form action=\"/create_process\" method=\"post\">\n              &lt;p>\n                &lt;input type=\"text\" name=\"title\" placeholder=\"title\">\n              &lt;/p>\n              &lt;p>\n                &lt;textarea name=\"description\" placeholder=\"description\">&lt;/textarea>\n              &lt;/p>\n\n              &lt;p>\n                &lt;input type=\"submit\">\n              &lt;/p>\n            &lt;/form>\n            </span><span class=\"token template-punctuation string\">`</span></span>\n            <span class=\"token punctuation\">)</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>많은 것이 생략된 코드는 위와 같다. create버튼을 누르게되면, 아래와 같이 post 메소드를 가진 form 형태가 나오는데, 여기에 정보를 작성한 후, 제출하게 되면, <code class=\"language-text\">/create_process</code> 라는 주소에서 받아서 데이터베이스에 정보를 추가하게 된다. <code class=\"language-text\">/create_process</code>는 아래 코드에서 볼 수 있다.<br>\n<img src=\"https://user-images.githubusercontent.com/71132893/111729994-bc9f1d80-88b3-11eb-903d-ae02c784bb20.png\" alt=\"image\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/create_process\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    body <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> data\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n            INSERT INTO topic (title, description, created, author_id) \n              VALUES(?, ?, NOW(), ?)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> error\n        <span class=\"token punctuation\">}</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/?id=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>insertId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">app.post</code>로 정보를 받아서, <code class=\"language-text\">req.on</code>으로 body에 데이터를 채워준 후, db.qeury문의 INSERT ~ VALUE로 데이터베이스에 정보를 삽입해준다.<br>\n정보 삽입이 끝나면, <code class=\"language-text\">res.redirect</code>기능이 추가된 그 페이지로 화면이 옮겨갈 수 있게 도와준다.</p>\n<h2 id=\"update\" style=\"position:relative;\"><a href=\"#update\" aria-label=\"update permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UPDATE</h2>\n<p>CREATE가 끝났다면, UPDATE와 DELETE도 같은 방식으로 정보를 보내주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/update'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT * FROM topic WHERE id=?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> topic</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;form action=\"/update_process\" method=\"post\">\n        &lt;input type=\"hidden\" name=\"id\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>topic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">\n        &lt;p>&lt;input type=\"text\" name=\"title\" placeholder=\"title\" value=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>topic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\">&lt;/p>\n        &lt;p>\n            &lt;textarea name=\"description\" placeholder=\"description\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>topic<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>description<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/textarea>\n        &lt;/p>\n        &lt;p>\n            &lt;input type=\"submit\">\n        &lt;/p>\n        &lt;/form>\n        </span><span class=\"token template-punctuation string\">`</span></span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>WHERE문을 이용해 SELECT한 정보에 UPDATE 정보를 post하여, 아래 /update_process에서 동일하게 처리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/update_process'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        body <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> data\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE topic SET title=?, description=?, author_id=? WHERE id=?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> error\n            <span class=\"token punctuation\">}</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/?id=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>post<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>CREATE와 작동방식이 같으며, 차이점은 redirect로 현재 업데이트한 파일로 화면을 표시하게 한다는 것이다.</p>\n<h2 id=\"delete\" style=\"position:relative;\"><a href=\"#delete\" aria-label=\"delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DELETE</h2>\n<p>delete에는 버튼을 누르기만 하면, 정보를 삭제하면되기 때문에, process에 대한 기능만 구현해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/delete_process'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        body <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> data\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE FROM topic WHERE id = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> error\n            <span class=\"token punctuation\">}</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"부가적인-기능\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EA%B0%80%EC%A0%81%EC%9D%B8-%EA%B8%B0%EB%8A%A5\" aria-label=\"부가적인 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부가적인 기능</h1>\n<p>위의 CRUD까지만 보아도 nodejs, mysql, express를 사용하는데는 문제가 없을 것이다. 하지만 express를 사용하는 데 큰 이유중 하나가 미들웨어이기 때문에 아래에서는 미들웨어에 대해 더 살펴보려고 한다.</p>\n<h2 id=\"미들웨어\" style=\"position:relative;\"><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4\" aria-label=\"미들웨어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>미들웨어</h2>\n<p>미들웨어란 <a href=\"https://expressjs.com/ko/guide/writing-middleware.html\">express.js</a>에 따르면, </p>\n<blockquote>\n<p>미들웨어 함수는 요청 오브젝트(req), 응답 오브젝트 (res), 그리고 애플리케이션의 요청-응답 주기 중 그 다음의 미들웨어 함수 대한 액세스 권한을 갖는 함수입니다. 그 다음의 미들웨어 함수는 일반적으로 next라는 이름의 변수로 표시됩니다. </p>\n</blockquote>\n<p>라고 정의되어 있다.  </p>\n<p>쉽게 말해 클라이언트에게 요청이 오고 그 요청을 다시 보내기 위해 응답하려는 미들에 목적에 맞게 처리를 하는, 말하자면 거쳐가는 함수들이라고 보면 되겠다.</p>\n<p>이 미들웨어의 종류는 다음과 같다. </p>\n<ul>\n<li><a href=\"https://expressjs.com/ko/guide/using-middleware.html#middleware.application\">애플리케이션 레벨 미들웨어</a></li>\n<li><a href=\"https://expressjs.com/ko/guide/using-middleware.html#middleware.router\">라우터 레벨 미들웨어</a></li>\n<li><a href=\"https://expressjs.com/ko/guide/using-middleware.html#middleware.error-handling\">오류 처리 미들웨어</a></li>\n<li><a href=\"https://expressjs.com/ko/guide/using-middleware.html#middleware.built-in\">기본 제공 미들웨어</a></li>\n<li><a href=\"https://expressjs.com/ko/guide/using-middleware.html#middleware.third-party\">써드파티 미들웨어</a></li>\n</ul>\n<h3 id=\"body-parser\" style=\"position:relative;\"><a href=\"#body-parser\" aria-label=\"body parser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>body-parser</h3>\n<p>우리는 이중 써드파티 미들웨어중 하나인 <code class=\"language-text\">body-parser</code>에 대해 알아볼 것이다.<br>\n써드파티 미들웨어란, express에서 공식적으로 만든 것이 아닌, 유저들이 만든 미들웨어를 뜻한다.<br>\n중에서 널리 사용되고 있는 body-parser은, 우리의 코드를 쉽게 만들어주는 역할을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/delete_process'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        body <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> data\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n        db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE FROM topic WHERE id = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> error\n            <span class=\"token punctuation\">}</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위는 delete process의 코드이다, 우리는 req.on을 이용해 데이터를 집어넣고 데이터를 활용하는데, body-parser을 이용하면 이러한 과정을 축약할 수 있다.<br>\nbody-parser을 이용하면, 위의 코드는 아래와 같이 축약될 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/delete_process'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> post<span class=\"token operator\">=</span>req<span class=\"token punctuation\">.</span>body\n    db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE FROM topic WHERE id = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>post<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> error\n        <span class=\"token punctuation\">}</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>body-parser에 내장된 코드 때문에 <code class=\"language-text\">req.on</code>을 이용한 코드들이 <code class=\"language-text\">req.body</code>라는 짧은 코드로 압축된 것을 볼 수 있다.</p>\n<h4 id=\"사용법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용법</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ npm install body<span class=\"token operator\">-</span>parser <span class=\"token operator\">--</span>save</code></pre></div>\n<p>위와같이 body-parser을 node dependency에 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bodyParser<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>extended<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>dependency를 다운받은 후, 메인 코드의 위쪽에 위의 코드를 추가하면 사용할 수 있다.</p>\n<h3 id=\"compression\" style=\"position:relative;\"><a href=\"#compression\" aria-label=\"compression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compression</h3>\n<p>또 다른 미들웨어 중에는, 네트워크 전송 메모리를 획기적으로 줄여줄 수 있는 미들웨어가 있다. Gzip압축을 사용하여 앱의 속도를 늘리는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ npm install compression <span class=\"token operator\">--</span>save</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bodyParser<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">compression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 사용할 수 있다.</p>\n<h2 id=\"보안\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EC%95%88\" aria-label=\"보안 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보안</h2>\n<p>서버를 운용할 때 보안이 가장 중요하다고 할 수 있는데, <a href=\"http://expressjs.com/ko/advanced/best-practice-security.html\">expressjs</a>에서는 몇가지를 소개하고 있다.</p>\n<ul>\n<li><a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#dont-use-deprecated-or-vulnerable-versions-of-express\">더 이상 사용되지 않거나 취약성이 있는 버전의 Express 사용 중지</a></li>\n<li><a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#use-tls\">TLS 사용</a></li>\n<li><a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#use-helmet\">Helmet 사용</a></li>\n<li><a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#use-cookies-securely\">쿠키를 안전하게 사용</a></li>\n<li><a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#prevent-brute-force-attacks-against-authorization\">인증 체계에 대한 브루스 포트 공격 방지</a></li>\n<li><a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#ensure-your-dependencies-are-secure\">종속 항목이 안전한지 확인</a></li>\n<li><a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#avoid-other-known-vulnerabilities\">그 외의 알려져 있는 취약점 회피</a></li>\n<li><a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#additional-considerations\">추가적인 고려사항</a></li>\n</ul>\n<h3 id=\"helmet\" style=\"position:relative;\"><a href=\"#helmet\" aria-label=\"helmet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>helmet</h3>\n<p>helmet은 보안을 유지하기 위한 미들웨어이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ npm install <span class=\"token operator\">--</span>save helmet</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">var</span> helmet <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'helmet'</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">helmet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>사용법은 위와 같으며, <a href=\"http://expressjs.com/ko/advanced/best-practice-security.html#use-helmet\">Helmet 사용</a>를 참고해, 몇가지의 조건을 활용할 수 있다.</p>\n<h1 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h1>\n<p>본 포스트는 생활코딩의 몇가지 강의를 바탕으로 새롭게 직접 작성되었습니다</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=-VRfO2hlf54&#x26;list=PLuHgQVnccGMBe0848t2_ZUgFNJdanOA_I&#x26;ab_channel=%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9\">DATABASE1 MYSQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=h_XDmyz--0w&#x26;list=PLuHgQVnccGMCgrP_9HL3dAcvdt8qOZxjW&#x26;ab_channel=%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9\">DATABASE2 MYSQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=3RS_A87IAPA&#x26;ab_channel=%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9\">WEB2 NODEJS</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1ee5vAou2Y0&#x26;ab_channel=%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9\">NODEJS &#x26; MYSQL</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hwknmhLKgYg&#x26;ab_channel=%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9\">WEB3 EXPRESS</a></li>\n</ul>\n<p>전체적인 코드는 아래에서 확인할 수 있습니다.   클론하여, <code class=\"language-text\">npm install</code>후에 <code class=\"language-text\">node main.js</code>를 하면 직접 사용해볼 수 있습니다.<br>\n<a href=\"https://github.com/Ho-s/education/tree/master/9.expressmysql\">Codes</a><br>\n위 강의에서 활용된 코드는 아래에서 확인할 수 있습니다.<br>\n<a href=\"https://github.com/Ho-s/education/blob/master/9.expressmysql/main.js\">main.js</a></p>","frontmatter":{"title":"Node.js에서 express와 mysql을 사용하여 CRUD구현하기","date":"19 March, 2021"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></p>\n<ul>\n<li><a href=\"#expressjs-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\">Express.js 사용 이유</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#crud-%EA%B5%AC%ED%98%84\">CRUD 구현</a></p>\n<ul>\n<li><a href=\"#read\">READ</a></li>\n<li><a href=\"#create\">CREATE</a></li>\n<li><a href=\"#update\">UPDATE</a></li>\n<li><a href=\"#delete\">DELETE</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B6%80%EA%B0%80%EC%A0%81%EC%9D%B8-%EA%B8%B0%EB%8A%A5\">부가적인 기능</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4\">미들웨어</a></p>\n<ul>\n<li>\n<p><a href=\"#body-parser\">body-parser</a></p>\n<ul>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\">사용법</a></li>\n</ul>\n</li>\n<li><a href=\"#compression\">Compression</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B3%B4%EC%95%88\">보안</a></p>\n<ul>\n<li><a href=\"#helmet\">helmet</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>"}},"pageContext":{"slug":"/Mysql-Nodejs-and-Express/"}},"staticQueryHashes":[]}