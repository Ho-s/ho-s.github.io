{"componentChunkName":"component---markdown-template-js","path":"/lecture12/","result":{"data":{"markdownRemark":{"html":"<h3>트리</h3>\n<ul>\n<li>트리는 가계도와 같은 <strong>계층적인 구조</strong>를 표현할 때 사용할 수 있는 자료구조이다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104416475-3adefb00-55b7-11eb-93e8-efb985129d2c.png\" alt=\"image\"></li>\n</ul>\n<h3>이진 탐색 트리(Binary Search Tree)</h3>\n<ul>\n<li><strong>이진 <span style='color:red'>탐색</span></strong>이 동작할 수 있도록 고안된 효율적인 탐색이 가능한 자료구조의 일종이다.</li>\n<li>\n<p>이진 탐색 트리의 특징 : <strong>왼쪽 자식 노드 &#x3C; 부모 노드 &#x3C; 오른쪽 자식 노드</strong></p>\n<ul>\n<li>부모 노드보다 왼쪽 자식 노드가 작다.</li>\n<li>부모 노드보다 오른쪽 자식 노드가 크다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104416711-9b6e3800-55b7-11eb-843a-0eee15603934.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>이진 탐색 트리가 이미 구성되어 있다고 가정하고 데이터를 조회하는 과정을 살펴보자.</li>\n<li>찾고자 하는 원소 : 37\n<img src=\"https://user-images.githubusercontent.com/71132893/104416818-c6588c00-55b7-11eb-8ee1-af6ab979bbaf.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104416966-fdc73880-55b7-11eb-855c-4ce788416dac.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/104416991-091a6400-55b8-11eb-9a34-641fb6dd1274.png\" alt=\"image\"></li>\n</ul>\n<h3>트리의 순회(Tree Traversal)</h3>\n<ul>\n<li>\n<p>트리 자료구조에 포함된 노드를 특정한 방법으로 한 번씩 방문하는 방법을 의미한다.</p>\n<ul>\n<li>트리의 정보를 시각적으로 확인할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>대표적인 트리 순회</strong> 방법은 다음과 같다.</p>\n<ul>\n<li><strong>전위 순회(pre-order traversal)</strong>: 루트를 먼저 방문한다.</li>\n<li><strong>중위 순회(in-order traversal)</strong>: 왼쪽 자식을 방문한 뒤에 루트를 방문한다.</li>\n<li><strong>후위 순회(post-order traversal)</strong>: 오른쪽 자식을 방문한 뒤에 루트를 방문한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104417308-7f1ecb00-55b8-11eb-93bc-af99b061e298.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>트리의 순회 구현 예제(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> left_node<span class=\"token punctuation\">,</span> right_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data\n        self<span class=\"token punctuation\">.</span>left_node <span class=\"token operator\">=</span> left_node\n        self<span class=\"token punctuation\">.</span>right_node <span class=\"token operator\">=</span> right_node\n\n<span class=\"token comment\">#전위 순회</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">pre_order</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left_node <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        pre_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right_node <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        pre_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#중위 순회</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">in_order</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left_node <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        in_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right_node <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        in_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#후위 순회</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">post_order</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>left_node <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        post_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>left_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>right_node <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        post_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>right_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntree<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data<span class=\"token punctuation\">,</span> left_node<span class=\"token punctuation\">,</span> right_node <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> left_node <span class=\"token operator\">==</span> <span class=\"token string\">\"None\"</span><span class=\"token punctuation\">:</span>\n        left_node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">if</span> right_node <span class=\"token operator\">==</span> <span class=\"token string\">\"None\"</span><span class=\"token punctuation\">:</span>\n        right_node <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    tree<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> left_node<span class=\"token punctuation\">,</span> right_node<span class=\"token punctuation\">)</span>\n\npre_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nin_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npost_order<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"알고리즘 공부 기록/강의12","date":"13 January, 2021"}}},"pageContext":{"slug":"/lecture12/"}},"staticQueryHashes":[]}