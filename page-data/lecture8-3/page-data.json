{"componentChunkName":"component---markdown-template-js","path":"/lecture8-3/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"위상-정렬\" style=\"position:relative;\"><a href=\"#%EC%9C%84%EC%83%81-%EC%A0%95%EB%A0%AC\" aria-label=\"위상 정렬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위상 정렬</h2>\n<ul>\n<li><span style='color:red'>사이클이 없는 방향 그래프</span>의 모든 노드를 <strong>방향성에 거스르지 않도록 순서대로 나열</strong>하는 것을 의미한다.</li>\n<li>예시) 선수 과목을 고려한 학습 순서 설정</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/71132893/103992698-db0fdb00-51d7-11eb-922b-a230228613e7.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p>위 세 과목을 모두 듣기 위한 <strong>적절한 학습 순서</strong>는?</p>\n<ul>\n<li>자료구조 - 알고리즘 - 고급 알고리즘 <span style='color:blue'>(O)</span></li>\n<li>자료구조 - 고급 알고리즘 - 알고리즘 <span style='color:red'>(X)</span></li>\n</ul>\n</li>\n<li>\n<p>진입차수와 진출차수</p>\n<ul>\n<li><strong>진입차수(Indegree)</strong> : 특정한 노드로 들어오는 간선의 개수</li>\n<li><strong>진출차수(Outdegree)</strong> : 특정한 노드에서 나가는 간선의 개수</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/71132893/103993017-49ed3400-51d8-11eb-8b65-9d63e86886b4.png\" alt=\"image\"></p>\n</li>\n<li>\n<p><strong>큐</strong>를 이용하는 <strong>위상 정렬 알고리즘의 동작 과정</strong>은 다음과 같다.</p>\n<ol>\n<li>진입차수가 0인 모든 노드를 큐에 넣는다</li>\n<li>큐가 빌 때까지 다음의 과정을 반복한다.\n<ol>\n<li>큐에서 원소를 꺼내 해당 노드에서 나가는 간선을 그래프에서 제거한다.</li>\n<li>새롭게 진입차수가 0이 된 노드를 큐에 넣는다.</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>결과적으로 <strong>각 노드가 큐에 들어온 순서가 위상 정렬을 수행한 결과</strong>와 같다.</p>\n</blockquote>\n</li>\n<li>\n<p>위상 정렬 동작 예시</p>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/71132893/103993671-51610d00-51d9-11eb-9459-7b02d19e3b5e.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993719-5e7dfc00-51d9-11eb-874c-a1bb6c80fb85.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993735-63db4680-51d9-11eb-8f05-9edb0f1c5093.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993777-73f32600-51d9-11eb-9c07-011f20a2db2a.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993807-7e152480-51d9-11eb-9378-d76753052d00.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993814-82414200-51d9-11eb-9bb2-5ead5f30c825.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993825-866d5f80-51d9-11eb-8f50-9dc2ef5695ef.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993833-8a00e680-51d9-11eb-8023-f91cf75a26ff.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993847-8d946d80-51d9-11eb-9dc8-25f087de2fe2.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/103993860-9127f480-51d9-11eb-915a-7e493b36bf5a.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p>위상 정렬의 특징</p>\n<ul>\n<li>위상 정렬은 DAG에 대해서만 수행할 수 있다.\n<ul>\n<li>DAG(Direct Acyclic Graph) : 순환하지 않는 방향 그래프</li>\n</ul>\n</li>\n<li>위상 정렬에서는 <strong>여러가지 답이 존재</strong>할 수 있다.\n<ul>\n<li>한 단계에서 큐에 새롭게 들어가는 원소가 2개 이상인 경우가 있다면 여러가지 답이 존재한다.</li>\n</ul>\n</li>\n<li><strong>모든 원소를 방문하기 전에 큐가 빈다면 사이클이 존재</strong>한다고 판단할 수 있다.\n<ul>\n<li>사이클에 포함된 원소 중에서 어떠한 원소도 큐에 들어가지 못한다.</li>\n</ul>\n</li>\n<li>스택을 이용한 DFS를 이용해 위상 정렬을 수행할 수도 있다.</li>\n</ul>\n</li>\n<li>\n<p>구현 예시(Python)</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\r\n\r\n<span class=\"token comment\"># 노드의 개수와 간선의 개수를 입력 받기</span>\r\nv<span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 모든 노드에 대한 진입차수는 0으로 초기화</span>\r\nindegree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 각 노드에 연결된 간선 정보를 담기 위한 연결 리스트 초기화</span>\r\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># 방향 그래프의 모든 간선 정보를 입력 받기</span>\r\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 정점 A에서 B로 이동 가능</span>\r\n    <span class=\"token comment\"># 진입 차수를 1 증가</span>\r\n    indegree<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n\r\n<span class=\"token comment\"># 위상 정렬 함수</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">topology_sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 알고리즘 수행 결과를 담을 리스트</span>\r\n    q <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 큐 기능을 위한 deque 라이브러리 사용</span>\r\n\r\n    <span class=\"token comment\"># 처음 시작할 때는 진입차수가 0인 노드를 큐에 삽입</span>\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> indegree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n            q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token comment\"># 큐가 빌 때까지 반복</span>\r\n    <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">:</span>\r\n        <span class=\"token comment\"># 큐에서 원소 꺼내기</span>\r\n        now <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span>\r\n        <span class=\"token comment\"># 해당 원소와 연결된 노드들의 진입차수에서 1 빼기</span>\r\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            indegree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\r\n            <span class=\"token comment\"># 새롭게 진입차수가 0이 되는 노드를 큐에 삽입</span>\r\n            <span class=\"token keyword\">if</span> indegree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\r\n                q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token comment\"># 위상 정렬을 수행한 결과 출력</span>\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\r\n\r\ntopology_sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>위상정렬 알고리즘 성능 분석\n<ul>\n<li>위상 정렬을 위해 차례대로 모든 노드를 확인하며 각 노드에서 나가는 간선을 차례대로 제거해야 한다.\n<ul>\n<li>위상 정렬 알고리즘의 시간 복잡도는 <strong><em>O</em></strong>(<strong><em>V</em> + <em>E</em></strong>)이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"알고리즘 공부 기록/강의8-3","date":"08 January, 2021"},"tableOfContents":"<ul>\n<li><a href=\"#%EC%9C%84%EC%83%81-%EC%A0%95%EB%A0%AC\">위상 정렬</a></li>\n</ul>"}},"pageContext":{"slug":"/lecture8-3/"}},"staticQueryHashes":[]}