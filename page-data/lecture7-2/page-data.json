{"componentChunkName":"component---markdown-template-js","path":"/lecture7-2/","result":{"data":{"markdownRemark":{"html":"<h2>플로이드 워셜 알고리즘</h2>\n<ul>\n<li>\n<p>개요</p>\n<ul>\n<li><u>모든 노드에서 다른 모든 노드까지의 최단 경로를 모두 계산</u>한다.</li>\n<li>\n<p>플로이드 워셜(Floyd-Warshall) 알고리즘은 다익스트라 알고리즘과 마찬가지로 단계별로 <strong>거쳐 가는 노드를 기준으로 알고리즘을 수행</strong>한다.</p>\n<ul>\n<li>다만 매 단계마다 방문하지 않은 노드 중에 최단 거리를 갖는 노드를 찾는 과정이 필요하지 않다.</li>\n</ul>\n</li>\n<li>플로이드 워셜은 2차원 테이블에 최단 거리 정보를 저장한다.</li>\n<li>플로이드 워셜 알고리즘은 다이나믹 프로그래밍 유형에 속한다.</li>\n<li>\n<p>각 단계마다 <strong>특정한 노드 <em>k</em>를 거쳐 가는 경우를 확인</strong>한다.</p>\n<ul>\n<li><em>a</em>에서 <em>b</em>로 가는 최단 거리보다 <em>a</em>에서 <em>k</em>를 거쳐 <em>b</em>로 가는 거리가 더 짧은지 검사한다.</li>\n</ul>\n</li>\n<li>\n<p>점화식은 다음과 같다.</p>\n<blockquote>\n<p><span style='font-size:30px'> <em>D<sub>ab</sub></em> = <em>min</em>(<em>D<sub>ab</sub></em>, <em>D<sub>ak</sub></em> + <em>D<sub>kb</sub></em>)</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>동작 과정 살펴보기\n<img src=\"https://user-images.githubusercontent.com/71132893/103747455-0662c080-5046-11eb-899b-1319d52c401b.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103747527-25615280-5046-11eb-9aa5-be828ee46fab.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103747639-4d50b600-5046-11eb-902a-6a3e8e2bf46e.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103747694-635e7680-5046-11eb-84d8-20870b958d7f.png\" alt=\"image\">\n<img src=\"https://user-images.githubusercontent.com/71132893/103747719-6b1e1b00-5046-11eb-9021-dcf9aa78b971.png\" alt=\"image\"></li>\n<li>구현 예시(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">INF <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e9</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 무한을 의미하는 값으로 10억을 설정</span>\n\n<span class=\"token comment\"># 노드의 개수 및 간선의 개수를 입력받기</span>\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nm <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 2차원 리스트(그래프 표현)를 만들고, 모든 값을 무한으로 초기화</span>\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화</span>\n<span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\"># 각 간선에 대한 정보를 입력 받아, 그 값으로 초기화</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># A에서 B로 가는 비용은 C라고 설정</span>\n    a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\n<span class=\"token comment\"># 점화식에 따라 플로이드 워셜 알고리즘을 수행</span>\n<span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> graph<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 수행된 결과를 출력</span>\n<span class=\"token keyword\">for</span> a <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 도달할 수 없는 경우, 무한(INFINITY)이라고 출력</span>\n        <span class=\"token keyword\">if</span> graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INFINITY\"</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 도달할 수 있는 경우 거리를 출력</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>성능 분석</p>\n<ul>\n<li>\n<p>노드의 개수가 <em>N</em>개일 때 알고리즘 상으로 <em>N</em>번의 단계를 수행한다.</p>\n<ul>\n<li>각 단계마다 <em>O</em>(<em>N</em><sup>2</sup>)의 연산을 통해 현재 노드를 거쳐 가는 모든 경로를 고려한다.</li>\n</ul>\n</li>\n<li>따라서 플로이드 워셜 알고리즘의 시간 복잡도는 <em>O</em>(<em>N<sup>3</sup></em>)이다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"알고리즘 공부 기록/강의7-2","date":"06 January, 2020"}}},"pageContext":{"slug":"/lecture7-2/"}},"staticQueryHashes":[]}