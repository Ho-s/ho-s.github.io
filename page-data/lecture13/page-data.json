{"componentChunkName":"component---markdown-template-js","path":"/lecture13/","result":{"data":{"markdownRemark":{"html":"<h3>음수 간선이 포함된 상황에서의 최단 거리 문제</h3>\n<ul>\n<li><strong>BOJ'타임머신'문제</strong>: <a href=\"https://www.acmicpc.net/problem/11657\">https://www.acmicpc.net/problem/11657</a></li>\n<li>N개의 도시가 있다. 그리고 한 도시에서 출발하여 다른 도시에 도착하는 버스가 M개 있다. 각 버스는 A, B, C로 나타낼 수 있는데, A는 시작도시, B는 도착도시, C는 버스를 타고 이동하는데 걸리는 시간이다. 시간 C가 양수가 아닌 경우가 있다. C=0인 경우는 순간이동을 하는 경우, C&#x3C;0인 경우는 타임머신으로 시간을 되돌아가는 경우이다. 1번 도시에서 출발해서 나머지 도시로 가는 가장 빠른 시간을 구하는 프로그램을 작성하시오.</li>\n<li><strong>도시의 개수</strong> : N(1 &#x3C;= N &#x3C;= 500)</li>\n<li><strong>버스 노선의 게수</strong> : M(1 &#x3C;= M &#x3C;= 6,000)</li>\n<li>이 문제를 어떻게 해결할 수 있을까?</li>\n<li>본 강의에서는 다익스트라 알고리즘을 알고 있다고 가정한다.</li>\n<li>\n<p>모든 간선의 비용이 양수일 때는 다익스트라 최단 경로 알고리즘을 사용하면 된다.</p>\n<ul>\n<li><strong>1번 노드에서 다른 노드로 가기 위한 최소 비용</strong>은 얼마일까?\n<img src=\"https://user-images.githubusercontent.com/71132893/104564668-8adcc100-568e-11eb-9b77-5dba149a9989.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>하지만 <strong><span style='color:blue'>음수 간선</span></strong>이 포함된다면 어떻게 문제를 해결할 수 있을까?</p>\n<ul>\n<li>아래 그래프에서는 <u>음수 간선이 포함</u>되어 있다.</li>\n<li>하지만 여전히 최단 거리를 계산할 수 있다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104564823-b8c20580-568e-11eb-8d78-88a0a19221ea.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>하지만 <strong><span style='color:blue'>음수 간선의 순환</span></strong>이 포함된다면 어떻게 문제를 해결할 수 있을까?</p>\n<ul>\n<li>아래 그래프에서는 <u>음수 간선의 순환이 포함</u>되어 있다.</li>\n<li>이 경우 최단 거리가 음의 무한인 노드가 발생한다.\n<img src=\"https://user-images.githubusercontent.com/71132893/104565014-fd4da100-568e-11eb-93e5-7bcd3aa5dfab.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h3>벨만 포드 최단 경로 알고리즘</h3>\n<ul>\n<li>\n<p>음수 간선에 관하여 최단 경로 문제는 다음과 같이 분류할 수 있다.</p>\n<ol>\n<li>모든 간선이 양수인 경우</li>\n<li>\n<p>음수 간선이 있는 경우</p>\n<ol>\n<li>음수 간선 순환은 없는 경우</li>\n<li>음수 간선 순환이 있는 경우</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>벨만 포드 최단 경로 알고리즘</strong>은 <u>음의 간선이 포함된 상황에서도 사용</u>할 수 있다.</p>\n<ul>\n<li>또한 <u>음수 간선의 순환을 감지</u>할 수 있다.</li>\n<li>벨만 포드의 기본 시간 복잡도는 <strong>O(VE)</strong> 로 다익스트라 알고리즘에 비해 느리다.</li>\n</ul>\n</li>\n<li>\n<p><strong>벨만 포드 알고리즘</strong>은 다음과 같다.</p>\n<ol>\n<li>출발 노드를 설정한다.</li>\n<li>최단 거리 테이블을 초기화한다.</li>\n<li>\n<p>다음과 과정을 N - 1번 반복한다.</p>\n<ol>\n<li>전체 간선 E개를 하나씩 확인한다.</li>\n<li>각 간선을 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신한다.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>만약 <u>음수 간선 순환이 발생하는지 체크하고 싶다면</u> <strong>3번의 과정을 한 번 더 수행</strong>한다.</p>\n<ul>\n<li>이때 최단 거리 테이블이 갱신된다면 음수 간선 순환이 존재하는 것이다.</li>\n</ul>\n</li>\n</ul>\n<h3>벨만 포드 알고리즘 VS 다익스트라 알고리즘</h3>\n<ul>\n<li>\n<p><strong>다익스트라 알고리즘</strong></p>\n<ul>\n<li><u>매번 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택</u>한다.</li>\n<li>음수 간선이 없다면 최적의 해를 찾을 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><strong>벨만 포드 알고리즘</strong></p>\n<ul>\n<li>\n<p><u>매번 모든 간선을 전부 확인</u>한다.</p>\n<ul>\n<li>따라서 <strong><span style='color:red'>다익스트라 알고리즘에서의 최적의 해를 항상 포함</span></strong>한다.</li>\n</ul>\n</li>\n<li>다익스트라 알고리즘에 비해서 시간이 오래 걸리지만 음수 간선 순환을 탐지할 수 있다.</li>\n</ul>\n</li>\n<li>벨만 포드 알고리즘 소스코드(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\nINF <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>ie9<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 무한을 의마하는 값으로 10억을 설정</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">bf</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 시작 노드에 대해서 초기화</span>\n    dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\"># 전체 n번의 라운드(round)를 반복</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 매 반복마다 \"모든 간선\"을 확인하며</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cur <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            next_node <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            cost <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># 현재 간선을 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우</span>\n            <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> INF nad dist<span class=\"token punctuation\">[</span>next_node<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dist<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">:</span>\n                dist<span class=\"token punctuation\">[</span>next_node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> cost\n                <span class=\"token comment\"># n번째 라운드에서도 값이 갱신된다면 음수 순환이 존재</span>\n                <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token comment\"># 노드의 개수, 간선의 개수를 입력 받기</span>\nn<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 모든 간선에 대한 정보를 담는 리스트 만들기</span>\nedges<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 최단 거리 테이블을 모두 무한으로 초기화</span>\n\n<span class=\"token comment\"># 모든 간선 정보를 입력 받기</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># a번 노드에서 b번 노드로 가는 비용이 c라는 의미</span>\n    edges<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 벨만 포드 알고리즘을 수행</span>\nnegartive_cycle<span class=\"token operator\">=</span>bf<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#1번 노드가 시작 노드</span>\n\n<span class=\"token keyword\">if</span> negative_cycle<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#1번 노드를 제외한 다른 모든 노드로 가기 위한 최단 거리 출력</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#도달할 수 없는 경우, -1을 출력</span>\n        <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> INF<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 도달할 수 있는 경우 거리를 출력</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"알고리즘 공부 기록/강의13","date":"14 January, 2021"}}},"pageContext":{"slug":"/lecture13/"}},"staticQueryHashes":[]}