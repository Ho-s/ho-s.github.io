{"componentChunkName":"component---markdown-template-js","path":"/lecture15/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"최소-공통-조상lowest-common-ancestor\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C-%EA%B3%B5%ED%86%B5-%EC%A1%B0%EC%83%81lowest-common-ancestor\" aria-label=\"최소 공통 조상lowest common ancestor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소 공통 조상(Lowest Common Ancestor)</h2>\n<ul>\n<li><strong>최소 공통 조상(LCA)</strong> 문제는 <u>두 노드의 공통된 조상 중에서 가장 가까운 조상을 찾는 문제</u>이다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/71132893/104869618-d1c9ff80-5989-11eb-934a-d86ec5ebbe94.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/104869630-d7274a00-5989-11eb-85a4-48cc3d3ecc32.png\" alt=\"image\"></p>\n<h3 id=\"기초-문제\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%B4%88-%EB%AC%B8%EC%A0%9C\" aria-label=\"기초 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기초 문제</h3>\n<ul>\n<li><strong>BOJ'LCA'</strong> 문제:<a href=\"https://www.acmicpc.net/problem/11437\">https://www.acmicpc.net/problem/11437</a></li>\n<li>N(2 &#x3C;= N &#x3C;= 50,000)개의 정점으로 이루어진 트리가 주어진다. 트리의 각 정점은 1번부터 N번까지 번호가 매겨져 있으며, 루트는 1번이다. 두 노드의 쌍 M(1 &#x3C;= M &#x3C;= 10,000)개가 주어졌을 때, 두 노드의 가장 가까운 공통 조상이 몇 번인지 출력한다.</li>\n<li>이 문제를 어떻게 해결할 수 있을까?</li>\n</ul>\n<h3 id=\"기본적인-최소-공통-조상lca-알고리즘\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%B5%9C%EC%86%8C-%EA%B3%B5%ED%86%B5-%EC%A1%B0%EC%83%81lca-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"기본적인 최소 공통 조상lca 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본적인 최소 공통 조상(LCA) 알고리즘</h3>\n<ul>\n<li><strong>최소 공통 조상</strong> 찾기 알고리즘은 다음과 같다</li>\n</ul>\n<ol>\n<li>모든 노드에 대한 깊이(depth)를 계산한다.</li>\n<li>최소 공통 조상을 찾을 두 노드를 확인한다.\n<ol>\n<li>먼저 두 노드의 깊이(depth)가 동일하도록 거슬러 올라간다.</li>\n<li>이후에 부모가 같아질 때까지 반복적으로 두 노드의 부모 방향으로 거슬러 올라간다.</li>\n</ol>\n</li>\n<li>모든 LCA(a, b) 연산에 대하여 2번의 과정을 반복한다.</li>\n</ol>\n<ul>\n<li>연산과정 살펴보기</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/71132893/104869783-2ec5b580-598a-11eb-93b9-95723c3b79c1.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/104869804-38e7b400-598a-11eb-8e5a-b09b5c806aa6.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/104869810-3dac6800-598a-11eb-8a69-7fe219021f16.png\" alt=\"image\"></p>\n<ul>\n<li>구현 예제(Python)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\r\nsys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#런타임 오류 피하기</span>\r\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\nparent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#부모 노드 정보</span>\r\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#각 노드까지의 깊이</span>\r\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#각 노드의 깊이가 계산되엇는지 여부</span>\r\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#그래프 정보</span>\r\n\r\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\r\n    graph<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 루트 노드부터 시작하여 깊이(depth)를 구하는 함수</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    c<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n    d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> depth\r\n    <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">continue</span>\r\n        parent<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\r\n        dfx<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># A와 B의 최소 공통 조상을 찾는 함수</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">lca</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\">#먼저 깊이가 동일하도록</span>\r\n    <span class=\"token keyword\">while</span> d<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> d<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            a<span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span>\r\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\r\n            b<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span>\r\n    <span class=\"token comment\">#노드가 같아지도록</span>\r\n    <span class=\"token keyword\">while</span> a <span class=\"token operator\">!=</span>b<span class=\"token punctuation\">:</span>\r\n        a<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span>\r\n        b<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">return</span> a\r\n\r\ndfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#루트 노드는 1번 노드</span>\r\n\r\nm <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    a<span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lca<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>시간 복잡도 분석\n<ul>\n<li>매 쿼리마다 부모 방향으로 거슬러 올라가기 위해 최악의 경우 O(N)의 시간 복잡도가 요구된다.\n<ul>\n<li>따라서 모든 쿼리를 처리할 때의 시간 복잡도는 O(NM)이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"심화-문제\" style=\"position:relative;\"><a href=\"#%EC%8B%AC%ED%99%94-%EB%AC%B8%EC%A0%9C\" aria-label=\"심화 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>심화 문제</h3>\n<ul>\n<li><strong>BOJ'LCA 2'</strong> 문제:<a href=\"https://www.acmicpc.net/problem/11438\">https://www.acmicpc.net/problem/11438</a></li>\n<li>N(2 &#x3C;= N &#x3C;= 100,000)개의 정점으로 이루어진 트리가 주어진다. 트리의 각 정점은 1번부터 N번까지 번호가 매겨져 있으며, 루트는 1번이다. 두 노드의 쌍 M(1 &#x3C;= M &#x3C;= 100,000)개가 주어졌을 때, 두 노드의 가장 가까운 공통 조상이 몇 번인지 출력한다.</li>\n<li>이 문제를 어떻게 해결할 수 있을까?</li>\n</ul>\n<h3 id=\"최소-공통-조상lca-알고리즘-개선하기\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C-%EA%B3%B5%ED%86%B5-%EC%A1%B0%EC%83%81lca-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0\" aria-label=\"최소 공통 조상lca 알고리즘 개선하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소 공통 조상(LCA) 알고리즘 개선하기</h3>\n<ul>\n<li>\n<p>각 노드가 <u>거슬러 올라가는 속도를 빠르게 만드는 방법</u>에 대하여 고민해보자</p>\n<ul>\n<li>만약 총 <strong>15칸</strong> 거슬러 올라가야 한다면?\n<ul>\n<li>8칸 -> 4칸 -> 2칸 -> 1칸</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>2의 제곱 형태로 거슬러 올라가도록 하면 O(logN)의 시간 복잡도를 보장할 수 있다.</p>\n</li>\n<li>\n<p>메모리를 조금 더 사용하여 각 노드에 대하여 2<sup><em>i</em></sup>번째 부모에 대한 정보를 기록하자.</p>\n</li>\n<li>\n<p>모든 노드의 깊이와 부모 구하기</p>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/71132893/104870342-a0eaca00-598b-11eb-8d6f-070d68746a84.png\" alt=\"image\"></p>\n<ul>\n<li>연산 과정 살펴보기</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/71132893/104870386-be1f9880-598b-11eb-8a3f-15a584af72ab.png\" alt=\"image\">\r\n<img src=\"https://user-images.githubusercontent.com/71132893/104870391-c24bb600-598b-11eb-8f85-d24d752e40c5.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p>시간 복잡도 분석</p>\n<ul>\n<li>다이나믹 프로그래밍을 이용해 시간 복잡도를 개선할 수 있다.\n<ul>\n<li>세그먼트 트리를 이용하는 방법도 존재한다.</li>\n</ul>\n</li>\n<li>매 쿼리마다 부모를 거슬러 올라가기 위해 <strong>O</strong>(<strong>logN</strong>)의 복잡도가 필요하다.\n<ul>\n<li>따라서 모든 쿼리를 처리할 때의 시간 복잡도는 <strong>O</strong>(<strong>logN</strong>)이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>구현 예제(python)</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\r\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline <span class=\"token comment\">#시간 초과를 피하기 위한 빠른 입력 함수</span>\r\nsys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#런타임 오류 피하기</span>\r\nLOG <span class=\"token operator\">=</span> <span class=\"token number\">21</span> <span class=\"token comment\"># 2^20=1,000,000</span>\r\n\r\nn<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nparent <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> LOG <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#부모 노드 정보</span>\r\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#각 노드까지의 깊이</span>\r\nc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#각 노드의 깊이가 계산되엇는지 여부</span>\r\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#그래프 정보</span>\r\n\r\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\r\n    graph<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 루트 노드부터 시작하여 깊이(depth)를 구하는 함수</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    c<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\r\n    d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> depth\r\n    <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#이미 깊이를 구했다면 넘기기</span>\r\n            <span class=\"token keyword\">continue</span>\r\n        parent<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x\r\n        dfx<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> depth <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 전체 부모 관계를 설정하는 함수</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    dfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 루트 노드는 1번 노드</span>\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> LOG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            parent<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token comment\"># A와 B의 최소 공통 조상을 찾는 함수</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">lca</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\"># b가 더 깊도록 설정</span>\r\n    <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> d<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n        a<span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span>b<span class=\"token punctuation\">,</span>a\r\n    <span class=\"token comment\">#먼저 깊이가 동일하도록</span>\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>LOG <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>d<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            b<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n    <span class=\"token comment\">#부모가 같아지도록</span>\r\n    <span class=\"token keyword\">if</span> a<span class=\"token operator\">==</span>b<span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> a\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>LOG <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token comment\">#조상을 향해 거슬러 올라가기</span>\r\n        <span class=\"token keyword\">if</span> parent<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> parent<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\r\n            a<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n            b<span class=\"token operator\">=</span>parent<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\r\n    <span class=\"token comment\"># 이후에 부모가 찾고자 하는 조상</span>\r\n    <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n\r\nset_parent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\nm <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    a<span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lca<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"알고리즘 공부 기록/강의15","date":"18 January, 2021"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%B5%9C%EC%86%8C-%EA%B3%B5%ED%86%B5-%EC%A1%B0%EC%83%81lowest-common-ancestor\">최소 공통 조상(Lowest Common Ancestor)</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EC%B4%88-%EB%AC%B8%EC%A0%9C\">기초 문제</a></li>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EC%B5%9C%EC%86%8C-%EA%B3%B5%ED%86%B5-%EC%A1%B0%EC%83%81lca-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">기본적인 최소 공통 조상(LCA) 알고리즘</a></li>\n<li><a href=\"#%EC%8B%AC%ED%99%94-%EB%AC%B8%EC%A0%9C\">심화 문제</a></li>\n<li><a href=\"#%EC%B5%9C%EC%86%8C-%EA%B3%B5%ED%86%B5-%EC%A1%B0%EC%83%81lca-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0\">최소 공통 조상(LCA) 알고리즘 개선하기</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"slug":"/lecture15/"}},"staticQueryHashes":[]}